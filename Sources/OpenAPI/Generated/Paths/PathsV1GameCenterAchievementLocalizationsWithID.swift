// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterAchievementLocalizations {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterAchievementLocalizations/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementLocalizationResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterAchievementLocalizations-get_instance")
		}

		public struct GetParameters {
			public var fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]?
			public var include: [Include]?
			public var fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?

			public enum FieldsGameCenterAchievementLocalizations: String, Codable, CaseIterable {
				case afterEarnedDescription
				case beforeEarnedDescription
				case gameCenterAchievement
				case gameCenterAchievementImage
				case locale
				case name
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterAchievement
				case gameCenterAchievementImage
			}

			public enum FieldsGameCenterAchievementImages: String, Codable, CaseIterable {
				case assetDeliveryState
				case fileName
				case fileSize
				case gameCenterAchievementLocalization
				case imageAsset
				case uploadOperations
				case uploaded
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case archived
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case points
				case referenceName
				case releases
				case repeatable
				case showBeforeEarned
				case vendorIdentifier
			}

			public init(fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]? = nil, include: [Include]? = nil, fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil) {
				self.fieldsGameCenterAchievementLocalizations = fieldsGameCenterAchievementLocalizations
				self.include = include
				self.fieldsGameCenterAchievementImages = fieldsGameCenterAchievementImages
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterAchievementLocalizations, forKey: "fields[gameCenterAchievementLocalizations]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsGameCenterAchievementImages, forKey: "fields[gameCenterAchievementImages]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterAchievementLocalizationUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementLocalizationResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterAchievementLocalizations-update_instance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterAchievementLocalizations-delete_instance")
		}
	}
}
