// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterLeaderboardSets {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterLeaderboardSets/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterLeaderboardSetResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterLeaderboardSets-get_instance")
		}

		public struct GetParameters {
			public var fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]?
			public var include: [Include]?
			public var fieldsGameCenterLeaderboardSetLocalizations: [FieldsGameCenterLeaderboardSetLocalizations]?
			public var fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]?
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var limitGameCenterLeaderboards: Int?
			public var limitLocalizations: Int?
			public var limitReleases: Int?

			public enum FieldsGameCenterLeaderboardSets: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboards
				case groupLeaderboardSet
				case localizations
				case referenceName
				case releases
				case vendorIdentifier
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboards
				case groupLeaderboardSet
				case localizations
				case releases
			}

			public enum FieldsGameCenterLeaderboardSetLocalizations: String, Codable, CaseIterable {
				case gameCenterLeaderboardSet
				case gameCenterLeaderboardSetImage
				case locale
				case name
			}

			public enum FieldsGameCenterLeaderboardSetReleases: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboardSet
				case live
			}

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case archived
				case defaultFormatter
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case groupLeaderboard
				case localizations
				case recurrenceDuration
				case recurrenceRule
				case recurrenceStartDate
				case referenceName
				case releases
				case scoreRangeEnd
				case scoreRangeStart
				case scoreSortType
				case submissionType
				case vendorIdentifier
			}

			public init(fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]? = nil, include: [Include]? = nil, fieldsGameCenterLeaderboardSetLocalizations: [FieldsGameCenterLeaderboardSetLocalizations]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, limitGameCenterLeaderboards: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) {
				self.fieldsGameCenterLeaderboardSets = fieldsGameCenterLeaderboardSets
				self.include = include
				self.fieldsGameCenterLeaderboardSetLocalizations = fieldsGameCenterLeaderboardSetLocalizations
				self.fieldsGameCenterLeaderboardSetReleases = fieldsGameCenterLeaderboardSetReleases
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.limitGameCenterLeaderboards = limitGameCenterLeaderboards
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterLeaderboardSets, forKey: "fields[gameCenterLeaderboardSets]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsGameCenterLeaderboardSetLocalizations, forKey: "fields[gameCenterLeaderboardSetLocalizations]")
				encoder.encode(fieldsGameCenterLeaderboardSetReleases, forKey: "fields[gameCenterLeaderboardSetReleases]")
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(limitGameCenterLeaderboards, forKey: "limit[gameCenterLeaderboards]")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterLeaderboardSetUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterLeaderboardSetResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterLeaderboardSets-update_instance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterLeaderboardSets-delete_instance")
		}
	}
}
