// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterDetails.WithID {
	public var leaderboardReleases: LeaderboardReleases {
		LeaderboardReleases(path: path + "/leaderboardReleases")
	}

	public struct LeaderboardReleases {
		/// Path: `/v1/gameCenterDetails/{id}/leaderboardReleases`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterLeaderboardReleasesResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterDetails-leaderboardReleases-get_to_many_related")
		}

		public struct GetParameters {
			public var filterLive: [String]?
			public var filterGameCenterLeaderboard: [String]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]?
			public var limit: Int?
			public var include: [Include]?

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case achievementReleases
				case app
				case arcadeEnabled
				case challengeEnabled
				case defaultGroupLeaderboard
				case defaultLeaderboard
				case gameCenterAchievements
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case leaderboardReleases
				case leaderboardSetReleases
			}

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case archived
				case defaultFormatter
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case groupLeaderboard
				case localizations
				case recurrenceDuration
				case recurrenceRule
				case recurrenceStartDate
				case referenceName
				case releases
				case scoreRangeEnd
				case scoreRangeStart
				case scoreSortType
				case submissionType
				case vendorIdentifier
			}

			public enum FieldsGameCenterLeaderboardReleases: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboard
				case live
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboard
			}

			public init(filterLive: [String]? = nil, filterGameCenterLeaderboard: [String]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]? = nil, limit: Int? = nil, include: [Include]? = nil) {
				self.filterLive = filterLive
				self.filterGameCenterLeaderboard = filterGameCenterLeaderboard
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.fieldsGameCenterLeaderboardReleases = fieldsGameCenterLeaderboardReleases
				self.limit = limit
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterLive, forKey: "filter[live]")
				encoder.encode(filterGameCenterLeaderboard, forKey: "filter[gameCenterLeaderboard]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(fieldsGameCenterLeaderboardReleases, forKey: "fields[gameCenterLeaderboardReleases]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
