// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterDetails {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterDetails/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterDetailResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterDetails-get_instance")
		}

		public struct GetParameters {
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var include: [Include]?
			public var fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]?
			public var fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]?
			public var fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]?
			public var fieldsGameCenterGroups: [FieldsGameCenterGroups]?
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]?
			public var fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]?
			public var limitAchievementReleases: Int?
			public var limitGameCenterAchievements: Int?
			public var limitGameCenterAppVersions: Int?
			public var limitGameCenterLeaderboardSets: Int?
			public var limitGameCenterLeaderboards: Int?
			public var limitLeaderboardReleases: Int?
			public var limitLeaderboardSetReleases: Int?

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case achievementReleases
				case app
				case arcadeEnabled
				case challengeEnabled
				case defaultGroupLeaderboard
				case defaultLeaderboard
				case gameCenterAchievements
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case leaderboardReleases
				case leaderboardSetReleases
			}

			public enum Include: String, Codable, CaseIterable {
				case achievementReleases
				case app
				case defaultGroupLeaderboard
				case defaultLeaderboard
				case gameCenterAchievements
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case leaderboardReleases
				case leaderboardSetReleases
			}

			public enum FieldsGameCenterAchievementReleases: String, Codable, CaseIterable {
				case gameCenterAchievement
				case gameCenterDetail
				case live
			}

			public enum FieldsGameCenterLeaderboardSetReleases: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboardSet
				case live
			}

			public enum FieldsGameCenterLeaderboardSets: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboards
				case groupLeaderboardSet
				case localizations
				case referenceName
				case releases
				case vendorIdentifier
			}

			public enum FieldsGameCenterGroups: String, Codable, CaseIterable {
				case gameCenterAchievements
				case gameCenterDetails
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case referenceName
			}

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case archived
				case defaultFormatter
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case groupLeaderboard
				case localizations
				case recurrenceDuration
				case recurrenceRule
				case recurrenceStartDate
				case referenceName
				case releases
				case scoreRangeEnd
				case scoreRangeStart
				case scoreSortType
				case submissionType
				case vendorIdentifier
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case archived
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case points
				case referenceName
				case releases
				case repeatable
				case showBeforeEarned
				case vendorIdentifier
			}

			public enum FieldsGameCenterAppVersions: String, Codable, CaseIterable {
				case appStoreVersion
				case compatibilityVersions
				case enabled
			}

			public enum FieldsGameCenterLeaderboardReleases: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboard
				case live
			}

			public init(fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, include: [Include]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]? = nil, limitAchievementReleases: Int? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterAppVersions: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitLeaderboardReleases: Int? = nil, limitLeaderboardSetReleases: Int? = nil) {
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.include = include
				self.fieldsGameCenterAchievementReleases = fieldsGameCenterAchievementReleases
				self.fieldsGameCenterLeaderboardSetReleases = fieldsGameCenterLeaderboardSetReleases
				self.fieldsGameCenterLeaderboardSets = fieldsGameCenterLeaderboardSets
				self.fieldsGameCenterGroups = fieldsGameCenterGroups
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.fieldsGameCenterAppVersions = fieldsGameCenterAppVersions
				self.fieldsGameCenterLeaderboardReleases = fieldsGameCenterLeaderboardReleases
				self.limitAchievementReleases = limitAchievementReleases
				self.limitGameCenterAchievements = limitGameCenterAchievements
				self.limitGameCenterAppVersions = limitGameCenterAppVersions
				self.limitGameCenterLeaderboardSets = limitGameCenterLeaderboardSets
				self.limitGameCenterLeaderboards = limitGameCenterLeaderboards
				self.limitLeaderboardReleases = limitLeaderboardReleases
				self.limitLeaderboardSetReleases = limitLeaderboardSetReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsGameCenterAchievementReleases, forKey: "fields[gameCenterAchievementReleases]")
				encoder.encode(fieldsGameCenterLeaderboardSetReleases, forKey: "fields[gameCenterLeaderboardSetReleases]")
				encoder.encode(fieldsGameCenterLeaderboardSets, forKey: "fields[gameCenterLeaderboardSets]")
				encoder.encode(fieldsGameCenterGroups, forKey: "fields[gameCenterGroups]")
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(fieldsGameCenterAppVersions, forKey: "fields[gameCenterAppVersions]")
				encoder.encode(fieldsGameCenterLeaderboardReleases, forKey: "fields[gameCenterLeaderboardReleases]")
				encoder.encode(limitAchievementReleases, forKey: "limit[achievementReleases]")
				encoder.encode(limitGameCenterAchievements, forKey: "limit[gameCenterAchievements]")
				encoder.encode(limitGameCenterAppVersions, forKey: "limit[gameCenterAppVersions]")
				encoder.encode(limitGameCenterLeaderboardSets, forKey: "limit[gameCenterLeaderboardSets]")
				encoder.encode(limitGameCenterLeaderboards, forKey: "limit[gameCenterLeaderboards]")
				encoder.encode(limitLeaderboardReleases, forKey: "limit[leaderboardReleases]")
				encoder.encode(limitLeaderboardSetReleases, forKey: "limit[leaderboardSetReleases]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterDetailUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterDetailResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterDetails-update_instance")
		}
	}
}
