// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterAchievements.WithID {
	public var groupAchievement: GroupAchievement {
		GroupAchievement(path: path + "/groupAchievement")
	}

	public struct GroupAchievement {
		/// Path: `/v1/gameCenterAchievements/{id}/groupAchievement`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterAchievementResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterAchievements-groupAchievement-get_to_one_related")
		}

		public struct GetParameters {
			public var fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]?
			public var fieldsGameCenterGroups: [FieldsGameCenterGroups]?
			public var fieldsGameCenterDetails: [FieldsGameCenterDetails]?
			public var fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]?
			public var fieldsGameCenterAchievements: [FieldsGameCenterAchievements]?
			public var limitLocalizations: Int?
			public var limitReleases: Int?
			public var include: [Include]?

			public enum FieldsGameCenterAchievementReleases: String, Codable, CaseIterable {
				case gameCenterAchievement
				case gameCenterDetail
				case live
			}

			public enum FieldsGameCenterGroups: String, Codable, CaseIterable {
				case gameCenterAchievements
				case gameCenterDetails
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case referenceName
			}

			public enum FieldsGameCenterDetails: String, Codable, CaseIterable {
				case achievementReleases
				case app
				case arcadeEnabled
				case challengeEnabled
				case defaultGroupLeaderboard
				case defaultLeaderboard
				case gameCenterAchievements
				case gameCenterAppVersions
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case gameCenterLeaderboards
				case leaderboardReleases
				case leaderboardSetReleases
			}

			public enum FieldsGameCenterAchievementLocalizations: String, Codable, CaseIterable {
				case afterEarnedDescription
				case beforeEarnedDescription
				case gameCenterAchievement
				case gameCenterAchievementImage
				case locale
				case name
			}

			public enum FieldsGameCenterAchievements: String, Codable, CaseIterable {
				case archived
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case points
				case referenceName
				case releases
				case repeatable
				case showBeforeEarned
				case vendorIdentifier
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case groupAchievement
				case localizations
				case releases
			}

			public init(fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include]? = nil) {
				self.fieldsGameCenterAchievementReleases = fieldsGameCenterAchievementReleases
				self.fieldsGameCenterGroups = fieldsGameCenterGroups
				self.fieldsGameCenterDetails = fieldsGameCenterDetails
				self.fieldsGameCenterAchievementLocalizations = fieldsGameCenterAchievementLocalizations
				self.fieldsGameCenterAchievements = fieldsGameCenterAchievements
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
				self.include = include
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterAchievementReleases, forKey: "fields[gameCenterAchievementReleases]")
				encoder.encode(fieldsGameCenterGroups, forKey: "fields[gameCenterGroups]")
				encoder.encode(fieldsGameCenterDetails, forKey: "fields[gameCenterDetails]")
				encoder.encode(fieldsGameCenterAchievementLocalizations, forKey: "fields[gameCenterAchievementLocalizations]")
				encoder.encode(fieldsGameCenterAchievements, forKey: "fields[gameCenterAchievements]")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				encoder.encode(include, forKey: "include")
				return encoder.items
			}
		}
	}
}
