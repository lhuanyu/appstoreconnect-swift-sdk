// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.GameCenterLeaderboards {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/gameCenterLeaderboards/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.GameCenterLeaderboardResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "gameCenterLeaderboards-get_instance")
		}

		public struct GetParameters {
			public var fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]?
			public var include: [Include]?
			public var fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations]?
			public var fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]?
			public var limitGameCenterLeaderboardSets: Int?
			public var limitLocalizations: Int?
			public var limitReleases: Int?

			public enum FieldsGameCenterLeaderboards: String, Codable, CaseIterable {
				case archived
				case defaultFormatter
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case groupLeaderboard
				case localizations
				case recurrenceDuration
				case recurrenceRule
				case recurrenceStartDate
				case referenceName
				case releases
				case scoreRangeEnd
				case scoreRangeStart
				case scoreSortType
				case submissionType
				case vendorIdentifier
			}

			public enum Include: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterGroup
				case gameCenterLeaderboardSets
				case groupLeaderboard
				case localizations
				case releases
			}

			public enum FieldsGameCenterLeaderboardLocalizations: String, Codable, CaseIterable {
				case formatterOverride
				case formatterSuffix
				case formatterSuffixSingular
				case gameCenterLeaderboard
				case gameCenterLeaderboardImage
				case locale
				case name
			}

			public enum FieldsGameCenterLeaderboardReleases: String, Codable, CaseIterable {
				case gameCenterDetail
				case gameCenterLeaderboard
				case live
			}

			public init(fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards]? = nil, include: [Include]? = nil, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases]? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) {
				self.fieldsGameCenterLeaderboards = fieldsGameCenterLeaderboards
				self.include = include
				self.fieldsGameCenterLeaderboardLocalizations = fieldsGameCenterLeaderboardLocalizations
				self.fieldsGameCenterLeaderboardReleases = fieldsGameCenterLeaderboardReleases
				self.limitGameCenterLeaderboardSets = limitGameCenterLeaderboardSets
				self.limitLocalizations = limitLocalizations
				self.limitReleases = limitReleases
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsGameCenterLeaderboards, forKey: "fields[gameCenterLeaderboards]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsGameCenterLeaderboardLocalizations, forKey: "fields[gameCenterLeaderboardLocalizations]")
				encoder.encode(fieldsGameCenterLeaderboardReleases, forKey: "fields[gameCenterLeaderboardReleases]")
				encoder.encode(limitGameCenterLeaderboardSets, forKey: "limit[gameCenterLeaderboardSets]")
				encoder.encode(limitLocalizations, forKey: "limit[localizations]")
				encoder.encode(limitReleases, forKey: "limit[releases]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.GameCenterLeaderboardUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.GameCenterLeaderboardResponse> {
			Request(path: path, method: "PATCH", body: body, id: "gameCenterLeaderboards-update_instance")
		}

		public var delete: Request<Void> {
			Request(path: path, method: "DELETE", id: "gameCenterLeaderboards-delete_instance")
		}
	}
}
